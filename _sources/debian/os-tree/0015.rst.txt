==============================
How to Grub2 load the Ostree
==============================


.. contents:: Table of Contents

In elxr OS, GRUB loads OSTree using a two-stage configuration process.

The initial entry point for GRUB is **/efi/EFI/debian/grub.cfg**. This file is

loaded by the GRUB EFI executable (**bootaa64.efi**), which is specifically

configured to first look for its primary configuration within the

**/efi/EFI/debian/** directory. From there, it typically directs GRUB

to load the main boot menu and further configurations from **/boot/grub/grub-elxr.cfg**.


bootaa64.efi
============

When the bootaa64.efi is executed by the UEFI firmware, it initializes itself.

It then uses the embedded prefix (/EFI/debian) to construct the path to its main grub.cfg file.

The standard behavior of GRUB is to look for grub.cfg within the $prefix directory. So, it will

effectively look for /EFI/debian/grub.cfg (relative to the ESP's root).


The **bootaa64.efi** was generated by the below code:


**elxr-config/boards/arm64/imx/minimal/image-ostree.yaml**:

.. code-block::

   export GRUB_MKIMAGE_MODULES=$(find $1/usr/lib/grub/arm64-efi/ -type f -name "*.mod" -exec basename {} .mod \;);
   chroot $1 grub-mkimage -p /EFI/debian -O arm64-efi -o /usr/lib/ostree-grub/EFI/BOOT/bootaa64.efi $GRUB_MKIMAGE_MODULES;


* The -p (or --prefix) option to grub-mkimage embeds a default root path inside the generated EFI executable (bootaa64.efi).

* This prefix tells GRUB where to find its essential modules and, crucially, where to look for its main configuration file (grub.cfg) relative to the root it establishes.

* When you set it to /EFI/debian, you are telling the bootaa64.efi binary: "Once I'm loaded by the UEFI firmware, assume my GRUB modules and main configuration file are located within the /EFI/debian directory (relative to the EFI System Partition's root)."


/efi/EFI/debian/grub.cfg
========================

.. code-block::

   root@localhost:~# cat /efi/EFI/debian/grub.cfg
   # graphics-mode output
   terminal_output --append gfxterm
   if [ -e (md/md-boot) ]; then
     # The search command might pick a RAID component rather than the RAID,
     # since the /boot RAID currently uses superblock 1.0.  See the comment in
     # the main grub.cfg.
     set prefix=md/md-boot
   else
     if [ -f ${config_directory}/bootuuid.cfg ]; then
       source ${config_directory}/bootuuid.cfg
     fi
     if [ -n "${BOOT_UUID}" ]; then
       search --fs-uuid "${BOOT_UUID}" --set prefix --no-floppy
     else
       search --label BOOT --set prefix --no-floppy
     fi
   fi
   set prefix=($prefix)/grub
   configfile $prefix/grub-elxr.cfg
   boot

The /efi/EFI/debian/grub.cfg file includes the command configfile $prefix/grub-elxr.cfg,

instructing GRUB to load its main configuration from **/boot/grub/grub-elxr.cfg**


/boot/grub/grub-elxr.cfg
========================

.. code-block::

   set pager=1
   # petitboot doesn't support -e and doesn't support an empty path part
   if [ -d (md/md-boot)/grub2 ]; then

   ...
   ...
   ...

   # Set env efi_vendor
   lsefisystab

   blscfg


Please note the last command **blscfg**.

**blscfg** is a GRUB module that implements the BLS standard within GRUB 2.

In grub.cfg, blscfg refers to a GRUB module and command that enables GRUB to read and process Boot Loader Specification (BLS) entries.

It looks for .conf files (BLS snippets) in the designated BLS directory (e.g., /boot/loader/entries/).

It reads the content of these .conf files and dynamically creates the GRUB menu entries that you see at boot time.

This happens at **boot time**, not when **grub2-mkconfig** is run.


so The grub.cfg itself no longer contains all the detailed menuentry blocks for every kernel. Instead, it just

contains the call to blscfg, which then handles the dynamic generation
