============
Constructor
============

Default constructor
----------------------

.. code-block:: cpp

    explicit deque(const allocator_type& __a = allocator_type()) 
    : _Base(__a, 0) {}
  
Copy constructor
---------------------

.. code-block:: cpp

    deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) 
    { uninitialized_copy(__x.begin(), __x.end(), _M_start); }
    

Fill constructor
------------------

Constructs a container with n elements. Each element is a copy if val.

.. code-block:: cpp

    deque(size_type __n, const value_type& __value,
        const allocator_type& __a = allocator_type()) : _Base(__a, __n)
    { _M_fill_initialize(__value); }
    explicit deque(size_type __n) : _Base(allocator_type(), __n)
    { _M_fill_initialize(value_type()); }
  
Range constructor
--------------------
 
Constructs a container with as many elements as the range [first,last), 
with each element constructed from its corresponding element in that range, in the same order.
 
.. code-block:: cpp 
 
	  deque(const value_type* __first, const value_type* __last,
	        const allocator_type& __a = allocator_type()) 
	    : _Base(__a, __last - __first)
	    { uninitialized_copy(__first, __last, _M_start); }
	  deque(const_iterator __first, const_iterator __last,
	        const allocator_type& __a = allocator_type()) 
	    : _Base(__a, __last - __first)
	    { uninitialized_copy(__first, __last, _M_start); }

Please refer to :doc:`base`


_M_fill_initialize
-----------------------


.. code-block:: cpp 

	// Precondition: _M_start and _M_finish have already been initialized,
	// but none of the deque's elements have yet been constructed.
	template <class _Tp, class _Alloc>
	void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {
	  _Map_pointer __cur;
	  __STL_TRY {
	    //为每个缓冲区设置初始值
	    for (__cur = _M_start._M_node; __cur < _M_finish._M_node; ++__cur)
	      uninitialized_fill(*__cur, *__cur + _S_buffer_size(), __value);
	    uninitialized_fill(_M_finish._M_first, _M_finish._M_cur, __value);
	  }
	  __STL_UNWIND(destroy(_M_start, iterator(*__cur, __cur)));
	}



Example
--------------

.. code-block:: cpp

   std::deque<int> ideq(20,9);

   for (int i = 0; i <ideq.size(); ++i)
   {
   		ideq[i] = i;
   }

   for (std::deque<int>::iterator it = ideq.begin(); it!=ideq.end(); ++it)
       std::cout << ' ' << *it;

   std::cout << std::endl;


output
===========


.. code-block:: console 

   liuhaitaodeMBP2:test $ ./deque1 
	 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
   liuhaitaodeMBP2:test $ 
   



.. image:: ../../../_static/image/deque_ini.jpg


.. note::

   这里的start._M_cur是指向开始的位置